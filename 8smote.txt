import pandas as pd
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/AirQualityUCI - empty.csv")

# set target variable to binary (1 if SalePrice >= 300000, 0 otherwise)
data['target'] = data['PT08.S1(CO)'].apply(lambda x: 1 if x <= 800 else 0)

# drop unnecessary columns
data.drop(['PT08.S1(CO)'], axis=1, inplace=True)

# encode categorical variables using one-hot encoding
cat_vars = data.select_dtypes(include=['object']).columns
encoder = OneHotEncoder(sparse=False)
encoded_cat = encoder.fit_transform(data[cat_vars])
encoded_cat_df = pd.DataFrame(encoded_cat, columns=encoder.get_feature_names_out(cat_vars))
data.drop(cat_vars, axis=1, inplace=True)
data = pd.concat([data, encoded_cat_df], axis=1)

# handle missing values
imputer = SimpleImputer(strategy='mean')
data = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# split data into training and testing sets
X=data.drop('target', axis=1)
y=data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# print class distribution before SMOTE
print('Before SMOTE:', Counter(y_train))

# apply SMOTE
smote = SMOTE()
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

# print class distribution after SMOTE
print('After SMOTE:', Counter(y_resampled))

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
X_resampled_pca = pca.fit_transform(X_resampled)

# create scatter plot
fig, ax = plt.subplots(figsize=(8, 6))
sns.scatterplot(x=X_resampled_pca[:,0], y=X_resampled_pca[:,1], hue=y_resampled, ax=ax)
ax.set_xlabel('PCA Component 1')
ax.set_ylabel('PCA Component 2')
ax.set_title('SMOTE Oversampling Results (2D PCA)')
plt.show()